(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{215:function(e,t,a){e.exports=a.p+"assets/img/redux001.47dead50.jpg"},216:function(e,t,a){e.exports=a.p+"assets/img/redux_flow.dc8b84a9.png"},472:function(e,t,a){"use strict";a.r(t);var r=a(0),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"redux详解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux详解","aria-hidden":"true"}},[e._v("#")]),e._v(" Redux详解")]),e._v(" "),r("h2",{attrs:{id:"什么是redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是redux","aria-hidden":"true"}},[e._v("#")]),e._v(" 什么是Redux")]),e._v(" "),r("blockquote",[r("p",[e._v("Redux is a predictable state container for JavaScript apps.")])]),e._v(" "),r("p",[e._v("简单点说，Redux 就是一个用来管理数据状态以及 UI 状态的 JavaScript 应用工具，它提供了__可预测化__的状态管理机制。")]),e._v(" "),r("p",[e._v("什么是可预测化?")]),e._v(" "),r("blockquote",[r("p",[e._v("就是根据固定的输入值,必定会得到一个固定的结果。")])]),e._v(" "),r("h2",{attrs:{id:"为什么要用redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用redux","aria-hidden":"true"}},[e._v("#")]),e._v(" 为什么要用Redux")]),e._v(" "),r("p",[e._v("随着单页面应用的普 及，web app 内部需要管理的状态越来越多，这些状态可能来自服务器端，用户输入的数据，用户交互数据，当前UI状态，本地的缓存数据等等。如何能够有条理的管理这些数据，成为前端开发中一个难题。而 Redux 的出现就是为了降低管理这些数据的难度的。")]),e._v(" "),r("p",[r("strong",[e._v("注: Redux 与 React 并没有直接的关系，React 支持 React、Angular、JQuery甚至纯 JavaScript")])]),e._v(" "),r("p",[e._v("可以通过一张图，看出 Redux 是如何简化状态管理的。")]),e._v(" "),r("p",[r("img",{attrs:{src:a(215),alt:""}})]),e._v(" "),r("p",[e._v("从图中可以看出，如果不使用 Redux，我们要传递 state 是非常繁琐的。Redux中，可以将数据预先存放在数据仓库(store-共用状态存储空间)中，可以通过 store 统一管理数据状态。当组件中有需要时，就可以通过 store 去查找自己所需状态。如果中途紫色组件想要改变组件的状态时，只需要改变 store 中的数据状态，其他组件内的状态也会相应地发生改变。")]),e._v(" "),r("h2",{attrs:{id:"三大原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三大原则","aria-hidden":"true"}},[e._v("#")]),e._v(" 三大原则")]),e._v(" "),r("h3",{attrs:{id:"单一数据源"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单一数据源","aria-hidden":"true"}},[e._v("#")]),e._v(" 单一数据源")]),e._v(" "),r("p",[e._v("在使用 Redux 的程序中，所有的 state 都存储在一个单一的数据源 store 内部，类似于一个巨大的状态树。")]),e._v(" "),r("h3",{attrs:{id:"state-是只读的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#state-是只读的","aria-hidden":"true"}},[e._v("#")]),e._v(" state 是只读的")]),e._v(" "),r("p",[e._v("state 中的数据是只读的，能改变 state 的唯一方式是通过触发 action 行为类进行修改。")]),e._v(" "),r("h3",{attrs:{id:"使用纯函数来执行修改"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用纯函数来执行修改","aria-hidden":"true"}},[e._v("#")]),e._v(" 使用纯函数来执行修改")]),e._v(" "),r("p",[e._v("为了描述 action 如何改变 state tree ，你需要编写 reducers。")]),e._v(" "),r("p",[e._v("reducers 是一个纯函数，接受两个参数，state 和 action。只需要根据 action 行为返回对应的 state 即可。且必须要有返回值。")]),e._v(" "),r("p",[e._v("什么是纯函数？")]),e._v(" "),r("blockquote",[r("p",[e._v("一个函数的返回结果只依赖于它的参数，并且在执行过程中没有副作用，我们就把这个函数叫做纯函数。")])]),e._v(" "),r("p",[r("strong",[e._v("Redux 工作流程")])]),e._v(" "),r("p",[r("img",{attrs:{src:a(216),alt:""}})]),e._v(" "),r("h2",{attrs:{id:"action"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#action","aria-hidden":"true"}},[e._v("#")]),e._v(" action")]),e._v(" "),r("p",[e._v("顾名思义，"),r("code",[e._v("action")]),e._v("用来表示动作，也就是通过动作来修改"),r("code",[e._v("state")]),e._v("的值。它也是修改"),r("code",[e._v("store")]),e._v("的唯一途径。")]),e._v(" "),r("p",[r("code",[e._v("action")]),e._v("本质上就是一个普通的"),r("code",[e._v("js")]),e._v("对象，我们约定这个对象必须要有一个"),r("code",[e._v("type")]),e._v("字段，用来表示我们当前进行的动作名称。一般我们会使用常量来表示"),r("code",[e._v("type")]),e._v("所对应的值。")]),e._v(" "),r("p",[e._v("此外，我们把"),r("code",[e._v("state")]),e._v("修改后的值通过"),r("code",[e._v("action")]),e._v("传递进来，因此，一个标准的"),r("code",[e._v("action")]),e._v("可能会是这个样子：")]),e._v(" "),r("div",{staticClass:"language-json line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-json"}},[r("code",[r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    type"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("'xxx' "),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// type代表动作类型")]),e._v("\n    payload"),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br")])]),r("h2",{attrs:{id:"reducer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reducer","aria-hidden":"true"}},[e._v("#")]),e._v(" Reducer")]),e._v(" "),r("p",[r("code",[e._v("action")]),e._v("仅仅只是描述了事件触发所需的字段，但并没有表明要做那些改变，这正是"),r("code",[e._v("reducer")]),e._v("所需要做的事情。")]),e._v(" "),r("p",[r("code",[e._v("reducer")]),e._v("作为纯函数，内部不建议使用任何带有副作用的操作，比如：操作外部变量，任何输入相同，输出却不一定相同的动作。")]),e._v(" "),r("p",[e._v("如果我们的"),r("code",[e._v("reducer")]),e._v("比较繁杂，我们不能把所有的逻辑都放在一个"),r("code",[e._v("reducer")]),e._v("中处理，那么此时就需要拆分"),r("code",[e._v("reducer")]),e._v("来达到简化的目的。")]),e._v(" "),r("p",[e._v("Redux 提供了 combineReducers API 将分离的多个"),r("code",[e._v("reducer")]),e._v("合并到一起。")])])}),[],!1,null,null,null);t.default=s.exports}}]);